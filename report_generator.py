#!/usr/bin/env python3
"""
Report Generator for AI Competitor Tracker
Creates markdown reports from scraped data
"""

import json
import logging
from collections import defaultdict
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional

import pandas as pd
from jinja2 import Template

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ReportGenerator:
    """Generate competitive intelligence reports from scraped data"""

    def __init__(self, data_dir: str = "data/raw", reports_dir: str = "reports"):
        """Initialize report generator"""
        self.data_dir = Path(data_dir)
        self.reports_dir = Path(reports_dir)
        self.reports_dir.mkdir(parents=True, exist_ok=True)
        self.template = self._get_report_template()

    def _get_report_template(self) -> Template:
        """Get Jinja2 template for report generation"""
        template_str = """# AI Competitive Intelligence Report
*Generated: {{ timestamp }}*

## Executive Summary

{{ summary }}

## Key Developments

{% for competitor in competitors %}
### {{ competitor.name }}

**Articles Found:** {{ competitor.article_count }}
{% if competitor.latest_articles %}
**Latest Updates:**
{% for article in competitor.latest_articles[:3] %}
- **{{ article.title }}**
  {% if article.date %}*{{ article.date }}*{% endif %}
  {% if article.content_preview %}
  > {{ article.content_preview[:200] }}...
  {% endif %}
  {% if article.link %}[Read more]({{ article.link }}){% endif %}

{% endfor %}
{% else %}
No recent updates found.
{% endif %}

{% endfor %}

## Competitive Insights

### Product & Feature Updates
{{ product_updates }}

### Market Trends
{{ market_trends }}

### Strategic Observations
{{ strategic_observations }}

## Data Collection Statistics

| Competitor | Status | Articles | Last Update |
|------------|--------|----------|-------------|
{% for stat in statistics %}
| {{ stat.name }} | {{ stat.status }} | {{ stat.count }} | {{ stat.last_update }} |
{% endfor %}

---
*Report generated by AI Competitor Tracker*
"""
        return Template(template_str)

    def generate_daily_report(self, date: Optional[datetime] = None) -> str:
        """Generate daily competitive intelligence report"""
        if date is None:
            date = datetime.now()

        logger.info(f"Generating report for {date.strftime('%Y-%m-%d')}")

        # Load latest data for each competitor
        competitor_data = self._load_latest_data()

        # Analyze data
        analysis = self._analyze_competitor_data(competitor_data)

        # Generate report content
        report_content = self.template.render(
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            summary=self._generate_summary(analysis),
            competitors=analysis['competitors'],
            product_updates=self._extract_product_updates(competitor_data),
            market_trends=self._identify_trends(competitor_data),
            strategic_observations=self._generate_observations(analysis),
            statistics=self._generate_statistics(competitor_data)
        )

        return report_content

    def _load_latest_data(self) -> List[Dict]:
        """Load the most recent data for each competitor"""
        competitor_data = {}

        # Get all JSON files
        json_files = sorted(
            self.data_dir.glob("*.json"),
            key=lambda x: x.stat().st_mtime,
            reverse=True
        )

        for file in json_files:
            with open(file, 'r') as f:
                data = json.load(f)
                competitor = data.get('competitor')

                # Keep only the most recent data for each competitor
                if competitor and competitor not in competitor_data:
                    competitor_data[competitor] = data

        return list(competitor_data.values())

    def _analyze_competitor_data(self, competitor_data: List[Dict]) -> Dict:
        """Analyze competitor data for insights"""
        analysis = {
            'competitors': [],
            'total_articles': 0,
            'active_competitors': 0
        }

        for data in competitor_data:
            competitor_analysis = {
                'name': data.get('competitor'),
                'article_count': len(data.get('articles', [])),
                'latest_articles': data.get('articles', [])[:5],
                'has_updates': len(data.get('articles', [])) > 0,
                'last_check': data.get('timestamp')
            }

            analysis['competitors'].append(competitor_analysis)
            analysis['total_articles'] += competitor_analysis['article_count']
            if competitor_analysis['has_updates']:
                analysis['active_competitors'] += 1

        return analysis

    def _generate_summary(self, analysis: Dict) -> str:
        """Generate executive summary"""
        total_articles = analysis.get('total_articles', 0)
        active_competitors = analysis.get('active_competitors', 0)
        total_competitors = len(analysis.get('competitors', []))

        summary_parts = []

        if total_articles > 0:
            summary_parts.append(
                f"Tracked {total_competitors} AI competitors with {total_articles} total updates detected."
            )

        if active_competitors > 0:
            summary_parts.append(
                f"{active_competitors} competitors have published new content."
            )

        # Highlight most active competitor
        competitors_by_activity = sorted(
            analysis.get('competitors', []),
            key=lambda x: x['article_count'],
            reverse=True
        )

        if competitors_by_activity and competitors_by_activity[0]['article_count'] > 0:
            most_active = competitors_by_activity[0]
            summary_parts.append(
                f"{most_active['name']} shows the most activity with {most_active['article_count']} updates."
            )

        return " ".join(summary_parts) if summary_parts else "No significant updates detected in this reporting period."

    def _extract_product_updates(self, competitor_data: List[Dict]) -> str:
        """Extract product and feature updates from articles"""
        product_keywords = [
            'launch', 'release', 'announce', 'introduce', 'unveil',
            'update', 'upgrade', 'feature', 'capability', 'model',
            'api', 'sdk', 'beta', 'preview', 'available'
        ]

        updates = []

        for data in competitor_data:
            competitor = data.get('competitor')
            for article in data.get('articles', [])[:3]:
                title = article.get('title', '').lower()
                content = article.get('content_preview', '').lower()

                # Check for product-related keywords
                if any(keyword in title or keyword in content for keyword in product_keywords):
                    updates.append(f"- **{competitor}**: {article.get('title')}")

        return "\n".join(updates) if updates else "No specific product updates identified."

    def _identify_trends(self, competitor_data: List[Dict]) -> str:
        """Identify market trends from competitor activities"""
        trend_keywords = {
            'ai_safety': ['safety', 'alignment', 'responsible', 'ethical', 'bias'],
            'open_source': ['open source', 'open-source', 'community', 'github'],
            'enterprise': ['enterprise', 'business', 'corporate', 'b2b'],
            'multimodal': ['multimodal', 'vision', 'image', 'video', 'audio'],
            'agents': ['agent', 'autonomous', 'workflow', 'automation']
        }

        trend_counts = defaultdict(int)

        for data in competitor_data:
            for article in data.get('articles', []):
                content = f"{article.get('title', '')} {article.get('content_preview', '')}".lower()

                for trend, keywords in trend_keywords.items():
                    if any(keyword in content for keyword in keywords):
                        trend_counts[trend] += 1

        trends = []
        for trend, count in sorted(trend_counts.items(), key=lambda x: x[1], reverse=True):
            if count > 1:
                trend_name = trend.replace('_', ' ').title()
                trends.append(f"- **{trend_name}**: Mentioned by {count} competitors")

        return "\n".join(trends) if trends else "No clear market trends identified."

    def _generate_observations(self, analysis: Dict) -> str:
        """Generate strategic observations"""
        observations = []

        # Activity level observation
        active_count = sum(1 for c in analysis['competitors'] if c['has_updates'])
        if active_count > len(analysis['competitors']) * 0.7:
            observations.append("- High activity across the competitive landscape suggests rapid innovation phase")
        elif active_count < len(analysis['competitors']) * 0.3:
            observations.append("- Low activity period may indicate focus on development rather than announcements")

        # Content volume observation
        total_articles = analysis.get('total_articles', 0)
        if total_articles > 20:
            observations.append("- Significant volume of updates indicates intense competition")

        # Leader identification
        top_competitors = sorted(
            analysis['competitors'],
            key=lambda x: x['article_count'],
            reverse=True
        )[:2]

        if top_competitors and top_competitors[0]['article_count'] > 0:
            leaders = ", ".join([c['name'] for c in top_competitors if c['article_count'] > 0])
            observations.append(f"- {leaders} leading in communication frequency")

        return "\n".join(observations) if observations else "Continue monitoring for emerging patterns."

    def _generate_statistics(self, competitor_data: List[Dict]) -> List[Dict]:
        """Generate data collection statistics"""
        stats = []

        for data in competitor_data:
            stats.append({
                'name': data.get('competitor', 'Unknown'),
                'status': '✅ Success' if 'error' not in data else '❌ Error',
                'count': len(data.get('articles', [])),
                'last_update': datetime.fromisoformat(
                    data.get('timestamp', datetime.now().isoformat())
                ).strftime('%Y-%m-%d %H:%M')
            })

        return stats

    def save_report(self, report_content: str, date: Optional[datetime] = None):
        """Save report to file"""
        if date is None:
            date = datetime.now()

        filename = self.reports_dir / f"{date.strftime('%Y-%m-%d')}.md"

        with open(filename, 'w') as f:
            f.write(report_content)

        logger.info(f"Report saved to {filename}")
        return filename

    def create_daily_report(self):
        """Create and save daily report"""
        report = self.generate_daily_report()
        filename = self.save_report(report)
        return report, filename


def main():
    """Main execution function"""
    print("=" * 60)
    print("AI Competitor Tracker - Report Generator")
    print("=" * 60)

    generator = ReportGenerator()

    print("\nGenerating competitive intelligence report...")
    report, filename = generator.create_daily_report()

    print(f"\nReport saved to: {filename}")
    print("\n" + "=" * 60)
    print("REPORT PREVIEW:")
    print("=" * 60)
    print(report[:1000] + "..." if len(report) > 1000 else report)
    print("=" * 60)


if __name__ == "__main__":
    main()